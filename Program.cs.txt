using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApp1
{
    public class Product
    {
        public int ProductId { get; set; }
        public string ProductName { get; set; }
        public decimal Rate { get; set; }
        public string Description { get; set; } // Auto-implemented property
        public int CategoryId { get; set; }

        public void Validate()
        {
            if (ProductId <= 0)
                throw new ProductValidationException("ProductId must be greater than 0");

            if (string.IsNullOrEmpty(ProductName))
                throw new ProductValidationException("ProductName cannot be null or empty");

            if (Rate <= 0)
                throw new ProductValidationException("Rate must be greater than 0");

            if (CategoryId <= 0)
                throw new ProductValidationException("CategoryId must be greater than 0");
        }
    }

    public class ProductValidationException : Exception
    {
        public ProductValidationException(string message) : base(message)
        {
        }
    }

    public class Program
    {
        static List<Product> productList = new List<Product>();

        static void Main(string[] args)
        {
            bool exit = false;
            while (!exit)
            {
                Console.WriteLine("===== Product Management Menu =====");
                Console.WriteLine("1. Get All productList");
                Console.WriteLine("2. Get Single Product");
                Console.WriteLine("3. Insert Product");
                Console.WriteLine("4. Update Product");
                Console.WriteLine("5. Delete Product");
                Console.WriteLine("6. Exit");
                Console.Write("Enter your choice (1-6): ");

                string choice = Console.ReadLine();
                switch (choice)
                {
                    case "1":
                        DisplayAllproductList();
                        break;
                    case "2":
                        DisplaySingleProduct();
                        break;
                    case "3":
                        InsertProduct();
                        break;
                    case "4":
                        UpdateProduct();
                        break;
                    case "5":
                        DeleteProduct();
                        break;
                    case "6":
                        exit = true;
                        break;
                    default:
                        Console.WriteLine("Invalid choice. Please try again.");
                        break;
                }

                Console.WriteLine();
            }
        }

        static void DisplayAllproductList()
        {
            if (productList.Count == 0)
            {
                Console.WriteLine("No productList found.");
            }
            else
            {
                Console.WriteLine("===== All productList =====");
                foreach (var product in productList)
                {
                    Console.WriteLine($"Product Id: {product.ProductId}, Name: {product.ProductName}, Rate: {product.Rate}");
                }
            }
        }

        static void DisplaySingleProduct()
        {
            Console.Write("Enter the Product Id: ");
            int productId = int.Parse(Console.ReadLine());
            var product = productList.Find(p => p.ProductId == productId);
            if (product != null)
            {
                Console.WriteLine($"Product Id: {product.ProductId}, Name: {product.ProductName}, Rate: {product.Rate}");
            }
            else
            {
                Console.WriteLine($"Product with Id {productId} not found.");
            }
        }

        static void InsertProduct()
        {
            Console.Write("Enter Product Id: ");
            int productId = int.Parse(Console.ReadLine());

            Console.Write("Enter Product Name: ");
            string productName = Console.ReadLine();

            Console.Write("Enter Rate: ");
            decimal rate = decimal.Parse(Console.ReadLine());

            Console.Write("Enter Description: ");
            string description = Console.ReadLine();

            Console.Write("Enter Category Id: ");
            int categoryId = int.Parse(Console.ReadLine());

            Product product = new Product
            {
                ProductId = productId,
                ProductName = productName,
                Rate = rate,
                Description = description,
                CategoryId = categoryId
            };

            try
            {
                product.Validate();
                productList.Add(product);
                Console.WriteLine("Product inserted successfully.");
            }
            catch (ProductValidationException ex)
            {
                Console.WriteLine($"Error: {ex.Message}");
            }
        }

        static void UpdateProduct()
        {
            Console.Write("Enter the Product Id to update: ");
            int productId = int.Parse(Console.ReadLine());

            var product = productList.Find(p => p.ProductId == productId);
            if (product == null)
            {
                Console.WriteLine($"Product with Id {productId} not found.");
                return;
            }

            Console.Write("Enter new Product Name: ");
            string productName = Console.ReadLine();

            Console.Write("Enter new Rate: ");
            decimal rate = decimal.Parse(Console.ReadLine());

            Console.Write("Enter new Description: ");
            string description = Console.ReadLine();

            Console.Write("Enter new Category Id: ");
            int categoryId = int.Parse(Console.ReadLine());

            product.ProductName = productName;
            product.Rate = rate;
            product.Description = description;
            product.CategoryId = categoryId;

            try
            {
                product.Validate();
                Console.WriteLine("Product updated successfully.");
            }
            catch (ProductValidationException ex)
            {
                Console.WriteLine($"Error: {ex.Message}");
            }
        }

        static void DeleteProduct()
        {
            Console.Write("Enter the Product Id to delete: ");
            int productId = int.Parse(Console.ReadLine());

            var product = productList.Find(p => p.ProductId == productId);
            if (product == null)
            {
                Console.WriteLine($"Product with Id {productId} not found.");
                return;
            }

            productList.Remove(product);
            Console.WriteLine($"Product with Id {productId} deleted successfully.");
        }
    }
}
